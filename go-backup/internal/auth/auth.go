package auth

import (
	"errors"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/backup-cronjob/internal/config"
	"github.com/backup-cronjob/internal/database"
	"github.com/backup-cronjob/internal/models"
	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
)

var cfg *config.Config

// Init kh·ªüi t·∫°o module x√°c th·ª±c
func Init(c *config.Config) {
	oldSecret := ""
	if cfg != nil {
		oldSecret = cfg.JWTSecret
	}

	cfg = c

	if oldSecret != cfg.JWTSecret {
		log.Printf("JWT Secret ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng")
	}

	// Ki·ªÉm tra JWT Secret h·ª£p l·ªá
	if cfg.JWTSecret == "" {
		log.Printf("C·∫¢NH B√ÅO: JWT Secret r·ªóng, ƒëi·ªÅu n√†y c√≥ th·ªÉ g√¢y l·ªói x√°c th·ª±c!")
	} else {
		log.Printf("Auth module ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi JWT Secret d√†i %d k√Ω t·ª±", len(cfg.JWTSecret))
	}
}

// GenerateJWT t·∫°o JWT token cho ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c
func GenerateJWT(user *models.User) (string, error) {
	// Thi·∫øt l·∫≠p th·ªùi gian h·∫øt h·∫°n (24 gi·ªù)
	expirationTime := time.Now().Add(24 * time.Hour)

	// T·∫°o JWT claims
	claims := jwt.MapClaims{
		"username": user.Username,
		"user_id":  user.ID,
		"exp":      expirationTime.Unix(),
	}

	// T·∫°o token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// K√Ω token v·ªõi secret
	tokenString, err := token.SignedString([]byte(cfg.JWTSecret))
	if err != nil {
		return "", err
	}

	return tokenString, nil
}

// ValidateJWT ki·ªÉm tra v√† x√°c th·ª±c JWT token
func ValidateJWT(tokenString string) (*models.JWTClaims, error) {
	// Parse JWT token
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		// Ki·ªÉm tra thu·∫≠t to√°n
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		return []byte(cfg.JWTSecret), nil
	})

	if err != nil {
		return nil, err
	}

	// X√°c th·ª±c token v√† l·∫•y claims
	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
		// Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
		if exp, ok := claims["exp"].(float64); ok {
			if time.Now().Unix() > int64(exp) {
				return nil, errors.New("token has expired")
			}
		}

		// L·∫•y th√¥ng tin t·ª´ claims
		userID, _ := claims["user_id"].(float64)
		username, _ := claims["username"].(string)

		return &models.JWTClaims{
			Username: username,
			UserID:   int64(userID),
		}, nil
	}

	return nil, errors.New("invalid token")
}

// Middleware x√°c th·ª±c JWT
func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		var tokenString string
		var source string

		// 1. Ki·ªÉm tra header Authorization
		authHeader := c.GetHeader("Authorization")
		if authHeader != "" && len(authHeader) > 7 && authHeader[:7] == "Bearer " {
			tokenString = authHeader[7:]
			source = "header"
		}

		// 2. Ki·ªÉm tra cookie auth_token n·∫øu kh√¥ng c√≥ header
		if tokenString == "" {
			authCookie, err := c.Cookie("auth_token")
			if err == nil && authCookie != "" {
				tokenString = authCookie
				source = "cookie"
			}
		}

		// 3. Ki·ªÉm tra query parameter token (cho c√°c link tr·ª±c ti·∫øp)
		if tokenString == "" {
			queryToken := c.Query("token")
			if queryToken != "" {
				tokenString = queryToken
				source = "query"
			}
		}

		// N·∫øu kh√¥ng c√≥ token t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o
		if tokenString == "" {
			// 4. Ghi log v·ªÅ truy c·∫≠p kh√¥ng c√≥ token
			log.Printf("‚ùå Access denied: No authentication token found at %s", c.Request.URL.Path)

			// Chuy·ªÉn h∆∞·ªõng c√°c request GET ƒë·∫øn trang ƒëƒÉng nh·∫≠p thay v√¨ tr·∫£ v·ªÅ JSON
			if c.Request.Method == "GET" && !strings.HasPrefix(c.Request.URL.Path, "/api/") {
				log.Printf("üîÑ Redirecting to login page from %s", c.Request.URL.Path)
				c.Redirect(http.StatusFound, "/login")
				c.Abort()
				return
			}

			// Tr·∫£ v·ªÅ l·ªói JSON cho c√°c request kh√°c
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "authentication required"})
			return
		}

		// X√°c th·ª±c token
		claims, err := ValidateJWT(tokenString)
		if err != nil {
			log.Printf("Token validation failed: %v (source: %s)", err, source)

			// X√≥a cookie n·∫øu token kh√¥ng h·ª£p l·ªá
			if source == "cookie" {
				log.Printf("Removing invalid auth_token cookie")
				c.SetCookie("auth_token", "", -1, "/", "", false, true)
				c.SetCookie("logged_in", "", -1, "/", "", false, false)
			}

			// Chuy·ªÉn h∆∞·ªõng c√°c request GET ƒë·∫øn trang ƒëƒÉng nh·∫≠p
			if c.Request.Method == "GET" && !strings.HasPrefix(c.Request.URL.Path, "/api/") {
				log.Printf("üîÑ Redirecting to login page due to invalid token")
				c.Redirect(http.StatusFound, "/login")
				c.Abort()
				return
			}

			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
			return
		}

		// L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o context
		c.Set("user_id", claims.UserID)
		c.Set("username", claims.Username)
		c.Set("auth_source", source)

		// ƒê·∫£m b·∫£o token ƒë∆∞·ª£c l∆∞u trong cookie n·∫øu ch∆∞a c√≥
		if source != "cookie" {
			log.Printf("Setting auth cookies from %s source", source)
			c.SetSameSite(http.SameSiteLaxMode)
			c.SetCookie(
				"auth_token",
				tokenString,
				3600*24, // 1 day
				"/",
				"",
				false,
				true,
			)
			c.SetCookie(
				"logged_in",
				"true",
				3600*24, // 1 day
				"/",
				"",
				false,
				false,
			)
		}

		c.Next()
	}
}

// AuthenticateUser ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu h·ª£p l·ªá
func AuthenticateUser(credentials *models.Auth) (*models.User, error) {
	// Ghi log th√¥ng tin ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª° l·ªói
	log.Printf("ƒêang x√°c th·ª±c ng∆∞·ªùi d√πng: username=%s, config.AdminUsername=%s",
		credentials.Username, cfg.AdminUsername)

	// Th·ª≠ x√°c th·ª±c t·ª´ database tr∆∞·ªõc
	user, err := database.GetUserByUsername(credentials.Username)
	if err == nil {
		// N·∫øu t√¨m th·∫•y ng∆∞·ªùi d√πng, ki·ªÉm tra m·∫≠t kh·∫©u
		log.Printf("T√¨m th·∫•y ng∆∞·ªùi d√πng trong DB: %s, ki·ªÉm tra m·∫≠t kh·∫©u", credentials.Username)
		if models.CheckPasswordHash(credentials.Password, user.Password) {
			log.Printf("X√°c th·ª±c th√†nh c√¥ng qua database cho ng∆∞·ªùi d√πng: %s", credentials.Username)
			return user, nil
		}
		log.Printf("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c cho ng∆∞·ªùi d√πng: %s", credentials.Username)
	} else {
		log.Printf("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng trong DB: %s (%v), th·ª≠ v·ªõi c·∫•u h√¨nh",
			credentials.Username, err)
	}

	// Th·ª≠ v·ªõi t√†i kho·∫£n admin t·ª´ c·∫•u h√¨nh
	log.Printf("Ki·ªÉm tra m·∫≠t kh·∫©u admin: credentials.Password==cfg.AdminPassword? %v",
		credentials.Password == cfg.AdminPassword)

	// Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p v·ªõi admin t·ª´ c·∫•u h√¨nh
	if credentials.Username == cfg.AdminUsername && credentials.Password == cfg.AdminPassword {
		log.Printf("X√°c th·ª±c th√†nh c√¥ng v·ªõi admin t·ª´ c·∫•u h√¨nh: %s", credentials.Username)
		return &models.User{
			ID:       1,
			Username: cfg.AdminUsername,
		}, nil
	}

	// Th·∫•t b·∫°i, tr·∫£ v·ªÅ l·ªói
	log.Printf("X√°c th·ª±c th·∫•t b·∫°i cho ng∆∞·ªùi d√πng: %s", credentials.Username)
	return nil, errors.New("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c")
}
